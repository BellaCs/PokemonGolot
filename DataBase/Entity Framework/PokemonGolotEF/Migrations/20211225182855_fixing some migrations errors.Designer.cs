// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokemonGolotEF.Data;

#nullable disable

namespace PokemonGolotEF.Migrations
{
    [DbContext(typeof(PokemonGolotDBContext))]
    [Migration("20211225182855_fixing some migrations errors")]
    partial class fixingsomemigrationserrors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokemonGolotEF.Model.Egg", b =>
                {
                    b.Property<double>("km_egg")
                        .HasColumnType("double precision");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("km_egg");

                    b.ToTable("Egg");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.EggInventory", b =>
                {
                    b.Property<double>("egg")
                        .HasColumnType("double precision");

                    b.Property<string>("player")
                        .HasColumnType("character varying(20)");

                    b.Property<double>("remaining_km")
                        .HasColumnType("double precision");

                    b.HasKey("egg", "player");

                    b.HasIndex("player");

                    b.ToTable("Egg_inventory");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.EggPokemonPool", b =>
                {
                    b.Property<int>("pokemon")
                        .HasColumnType("integer");

                    b.Property<double>("egg")
                        .HasColumnType("double precision");

                    b.HasKey("pokemon", "egg");

                    b.HasIndex("egg");

                    b.ToTable("Egg_pokemon_pool");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Element", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.ToTable("Element");

                    b.HasData(
                        new
                        {
                            name = "normal"
                        },
                        new
                        {
                            name = "fighting"
                        },
                        new
                        {
                            name = "flying"
                        },
                        new
                        {
                            name = "poison"
                        },
                        new
                        {
                            name = "ground"
                        },
                        new
                        {
                            name = "rock"
                        },
                        new
                        {
                            name = "bug"
                        },
                        new
                        {
                            name = "ghost"
                        },
                        new
                        {
                            name = "steel"
                        },
                        new
                        {
                            name = "fire"
                        },
                        new
                        {
                            name = "water"
                        },
                        new
                        {
                            name = "grass"
                        },
                        new
                        {
                            name = "electric"
                        },
                        new
                        {
                            name = "psychic"
                        },
                        new
                        {
                            name = "ice"
                        },
                        new
                        {
                            name = "dragon"
                        },
                        new
                        {
                            name = "dark"
                        },
                        new
                        {
                            name = "fairy"
                        },
                        new
                        {
                            name = "unknown"
                        },
                        new
                        {
                            name = "shadow"
                        });
                });

            modelBuilder.Entity("PokemonGolotEF.Model.EvolutionChain", b =>
                {
                    b.Property<int>("pokemon_base")
                        .HasColumnType("integer");

                    b.Property<int>("pokemon_evolved")
                        .HasColumnType("integer");

                    b.Property<int>("candy_needed")
                        .HasColumnType("integer");

                    b.HasKey("pokemon_base", "pokemon_evolved");

                    b.HasIndex("pokemon_evolved");

                    b.ToTable("Evolution_chain");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Friendship", b =>
                {
                    b.Property<string>("player")
                        .HasColumnType("character varying(20)");

                    b.Property<string>("friend")
                        .HasColumnType("character varying(20)");

                    b.HasKey("player", "friend");

                    b.HasIndex("friend");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Gym", b =>
                {
                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("team")
                        .HasColumnType("text");

                    b.HasKey("location");

                    b.HasIndex("team");

                    b.ToTable("Gym");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.GymDefense", b =>
                {
                    b.Property<string>("gym")
                        .HasColumnType("text");

                    b.Property<int>("pokemon")
                        .HasColumnType("integer");

                    b.Property<int>("defense_time")
                        .HasColumnType("integer");

                    b.Property<int>("times_feeded")
                        .HasColumnType("integer");

                    b.HasKey("gym", "pokemon");

                    b.HasIndex("pokemon");

                    b.ToTable("Gym_defensors");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.GymTrophy", b =>
                {
                    b.Property<string>("gym")
                        .HasColumnType("text");

                    b.Property<string>("player")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("fights_won")
                        .HasColumnType("integer");

                    b.Property<int>("pokemon_time")
                        .HasColumnType("integer");

                    b.Property<int>("times_feeded")
                        .HasColumnType("integer");

                    b.HasKey("gym", "player");

                    b.HasIndex("player");

                    b.ToTable("Gym_trophies");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Level", b =>
                {
                    b.Property<short>("level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("level"));

                    b.Property<int>("necessary_xp")
                        .HasColumnType("integer");

                    b.HasKey("level");

                    b.ToTable("Level");

                    b.HasData(
                        new
                        {
                            level = (short)1,
                            necessary_xp = 0
                        },
                        new
                        {
                            level = (short)2,
                            necessary_xp = 1000
                        },
                        new
                        {
                            level = (short)3,
                            necessary_xp = 3000
                        },
                        new
                        {
                            level = (short)4,
                            necessary_xp = 6000
                        },
                        new
                        {
                            level = (short)5,
                            necessary_xp = 10000
                        },
                        new
                        {
                            level = (short)6,
                            necessary_xp = 15000
                        },
                        new
                        {
                            level = (short)7,
                            necessary_xp = 21000
                        },
                        new
                        {
                            level = (short)8,
                            necessary_xp = 28000
                        },
                        new
                        {
                            level = (short)9,
                            necessary_xp = 36000
                        },
                        new
                        {
                            level = (short)10,
                            necessary_xp = 45000
                        },
                        new
                        {
                            level = (short)11,
                            necessary_xp = 55000
                        },
                        new
                        {
                            level = (short)12,
                            necessary_xp = 65000
                        },
                        new
                        {
                            level = (short)13,
                            necessary_xp = 75000
                        },
                        new
                        {
                            level = (short)14,
                            necessary_xp = 85000
                        },
                        new
                        {
                            level = (short)15,
                            necessary_xp = 100000
                        },
                        new
                        {
                            level = (short)16,
                            necessary_xp = 120000
                        },
                        new
                        {
                            level = (short)17,
                            necessary_xp = 140000
                        },
                        new
                        {
                            level = (short)18,
                            necessary_xp = 160000
                        },
                        new
                        {
                            level = (short)19,
                            necessary_xp = 185000
                        },
                        new
                        {
                            level = (short)20,
                            necessary_xp = 210000
                        },
                        new
                        {
                            level = (short)21,
                            necessary_xp = 260000
                        },
                        new
                        {
                            level = (short)22,
                            necessary_xp = 335000
                        },
                        new
                        {
                            level = (short)23,
                            necessary_xp = 435000
                        },
                        new
                        {
                            level = (short)24,
                            necessary_xp = 560000
                        },
                        new
                        {
                            level = (short)25,
                            necessary_xp = 710000
                        },
                        new
                        {
                            level = (short)26,
                            necessary_xp = 900000
                        },
                        new
                        {
                            level = (short)27,
                            necessary_xp = 1100000
                        },
                        new
                        {
                            level = (short)28,
                            necessary_xp = 1350000
                        },
                        new
                        {
                            level = (short)29,
                            necessary_xp = 1650000
                        },
                        new
                        {
                            level = (short)30,
                            necessary_xp = 2000000
                        },
                        new
                        {
                            level = (short)31,
                            necessary_xp = 2500000
                        },
                        new
                        {
                            level = (short)32,
                            necessary_xp = 3000000
                        },
                        new
                        {
                            level = (short)33,
                            necessary_xp = 3750000
                        },
                        new
                        {
                            level = (short)34,
                            necessary_xp = 4750000
                        },
                        new
                        {
                            level = (short)35,
                            necessary_xp = 6000000
                        },
                        new
                        {
                            level = (short)36,
                            necessary_xp = 7500000
                        },
                        new
                        {
                            level = (short)37,
                            necessary_xp = 9500000
                        },
                        new
                        {
                            level = (short)38,
                            necessary_xp = 12000000
                        },
                        new
                        {
                            level = (short)39,
                            necessary_xp = 15000000
                        },
                        new
                        {
                            level = (short)40,
                            necessary_xp = 20000000
                        },
                        new
                        {
                            level = (short)41,
                            necessary_xp = 26000000
                        },
                        new
                        {
                            level = (short)42,
                            necessary_xp = 33500000
                        },
                        new
                        {
                            level = (short)43,
                            necessary_xp = 42500000
                        },
                        new
                        {
                            level = (short)44,
                            necessary_xp = 53500000
                        },
                        new
                        {
                            level = (short)45,
                            necessary_xp = 66500000
                        },
                        new
                        {
                            level = (short)46,
                            necessary_xp = 82000000
                        },
                        new
                        {
                            level = (short)47,
                            necessary_xp = 100000000
                        },
                        new
                        {
                            level = (short)48,
                            necessary_xp = 121000000
                        },
                        new
                        {
                            level = (short)49,
                            necessary_xp = 146000000
                        },
                        new
                        {
                            level = (short)50,
                            necessary_xp = 176000000
                        });
                });

            modelBuilder.Entity("PokemonGolotEF.Model.LevelupObjectReward", b =>
                {
                    b.Property<short>("level")
                        .HasColumnType("smallint");

                    b.Property<string>("object_name")
                        .HasColumnType("text");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("level", "object_name");

                    b.HasIndex("object_name");

                    b.ToTable("Levelup_object_rewards");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Movement", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("duration")
                        .HasColumnType("integer");

                    b.Property<string>("element")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("energy")
                        .HasColumnType("double precision");

                    b.Property<int>("power")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.HasIndex("element");

                    b.ToTable("Movement");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Object", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.ToTable("Object");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.ObjectInventory", b =>
                {
                    b.Property<string>("object_name")
                        .HasColumnType("text");

                    b.Property<string>("player")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("object_name", "player");

                    b.HasIndex("player");

                    b.ToTable("Object_inventories");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PackageItems", b =>
                {
                    b.Property<string>("object_name")
                        .HasColumnType("text");

                    b.Property<string>("package")
                        .HasColumnType("text");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("object_name", "package");

                    b.HasIndex("package");

                    b.ToTable("Package_items");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PackageOffer", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("name");

                    b.ToTable("Package_offer");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PackageOfferBought", b =>
                {
                    b.Property<string>("package")
                        .HasColumnType("text");

                    b.Property<string>("user")
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("last_bought_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("package", "user");

                    b.HasIndex("user");

                    b.ToTable("Package_offers_bought");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Player", b =>
                {
                    b.Property<string>("user_name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("birth_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("user_name");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Pokemon", b =>
                {
                    b.Property<int>("num_pokedex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("num_pokedex"));

                    b.Property<double?>("Eggkm_egg")
                        .HasColumnType("double precision");

                    b.Property<double>("attack")
                        .HasColumnType("double precision");

                    b.Property<double>("defense")
                        .HasColumnType("double precision");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("female_gender")
                        .HasColumnType("boolean");

                    b.Property<float>("female_gender_rate")
                        .HasColumnType("real");

                    b.Property<string>("img_back")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("img_front")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("male_gender")
                        .HasColumnType("boolean");

                    b.Property<float>("male_gender_rate")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("stamina")
                        .HasColumnType("double precision");

                    b.HasKey("num_pokedex");

                    b.HasIndex("Eggkm_egg");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonExchange", b =>
                {
                    b.Property<int>("pokemon")
                        .HasColumnType("integer");

                    b.Property<string>("ex_owner")
                        .HasColumnType("character varying(20)");

                    b.HasKey("pokemon", "ex_owner");

                    b.HasIndex("ex_owner");

                    b.ToTable("Pokemon_exchange");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonLevel", b =>
                {
                    b.Property<float>("pokemon_level")
                        .HasColumnType("real");

                    b.Property<int>("candy_to_upgrade")
                        .HasColumnType("integer");

                    b.Property<double>("cp_multiplier")
                        .HasColumnType("double precision");

                    b.Property<int>("stardust_to_upgrade")
                        .HasColumnType("integer");

                    b.HasKey("pokemon_level");

                    b.ToTable("Pokemon_level");

                    b.HasData(
                        new
                        {
                            pokemon_level = 1f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.093999996781349182,
                            stardust_to_upgrade = 200
                        },
                        new
                        {
                            pokemon_level = 1.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.13513743132352829,
                            stardust_to_upgrade = 200
                        },
                        new
                        {
                            pokemon_level = 2f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.16639786958694458,
                            stardust_to_upgrade = 200
                        },
                        new
                        {
                            pokemon_level = 2.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.19265091419219971,
                            stardust_to_upgrade = 200
                        },
                        new
                        {
                            pokemon_level = 3f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.21573247015476227,
                            stardust_to_upgrade = 400
                        },
                        new
                        {
                            pokemon_level = 3.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.23657265305519104,
                            stardust_to_upgrade = 400
                        },
                        new
                        {
                            pokemon_level = 4f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.25572004914283752,
                            stardust_to_upgrade = 400
                        },
                        new
                        {
                            pokemon_level = 4.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.27353037893772125,
                            stardust_to_upgrade = 400
                        },
                        new
                        {
                            pokemon_level = 5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.29024988412857056,
                            stardust_to_upgrade = 600
                        },
                        new
                        {
                            pokemon_level = 5.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.30605737864971161,
                            stardust_to_upgrade = 600
                        },
                        new
                        {
                            pokemon_level = 6f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.32108759880065918,
                            stardust_to_upgrade = 600
                        },
                        new
                        {
                            pokemon_level = 6.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.33544503152370453,
                            stardust_to_upgrade = 600
                        },
                        new
                        {
                            pokemon_level = 7f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.34921267628669739,
                            stardust_to_upgrade = 800
                        },
                        new
                        {
                            pokemon_level = 7.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.36245773732662201,
                            stardust_to_upgrade = 800
                        },
                        new
                        {
                            pokemon_level = 8f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.37523558735847473,
                            stardust_to_upgrade = 800
                        },
                        new
                        {
                            pokemon_level = 8.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.38759241108516856,
                            stardust_to_upgrade = 800
                        },
                        new
                        {
                            pokemon_level = 9f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.39956727623939514,
                            stardust_to_upgrade = 1000
                        },
                        new
                        {
                            pokemon_level = 9.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.41119354951725062,
                            stardust_to_upgrade = 1000
                        },
                        new
                        {
                            pokemon_level = 10f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.4225000143051148,
                            stardust_to_upgrade = 1000
                        },
                        new
                        {
                            pokemon_level = 10.5f,
                            candy_to_upgrade = 1,
                            cp_multiplier = 0.43292641341041438,
                            stardust_to_upgrade = 1000
                        },
                        new
                        {
                            pokemon_level = 11f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.44310754537582397,
                            stardust_to_upgrade = 1300
                        },
                        new
                        {
                            pokemon_level = 11.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.45305995387198578,
                            stardust_to_upgrade = 1300
                        },
                        new
                        {
                            pokemon_level = 12f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.46279838681221003,
                            stardust_to_upgrade = 1300
                        },
                        new
                        {
                            pokemon_level = 12.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.47233607806265349,
                            stardust_to_upgrade = 1300
                        },
                        new
                        {
                            pokemon_level = 13f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.48168495297431951,
                            stardust_to_upgrade = 1600
                        },
                        new
                        {
                            pokemon_level = 13.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.4908558102324605,
                            stardust_to_upgrade = 1600
                        },
                        new
                        {
                            pokemon_level = 14f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.49985843896865839,
                            stardust_to_upgrade = 1600
                        },
                        new
                        {
                            pokemon_level = 14.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.50870175659656525,
                            stardust_to_upgrade = 1600
                        },
                        new
                        {
                            pokemon_level = 15f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.51739394664764404,
                            stardust_to_upgrade = 1900
                        },
                        new
                        {
                            pokemon_level = 15.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.52594251185655594,
                            stardust_to_upgrade = 1900
                        },
                        new
                        {
                            pokemon_level = 16f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.53435432910919189,
                            stardust_to_upgrade = 1900
                        },
                        new
                        {
                            pokemon_level = 16.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.54263576120138168,
                            stardust_to_upgrade = 1900
                        },
                        new
                        {
                            pokemon_level = 17f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.55079269409179688,
                            stardust_to_upgrade = 2200
                        },
                        new
                        {
                            pokemon_level = 17.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.55883059930056334,
                            stardust_to_upgrade = 2200
                        },
                        new
                        {
                            pokemon_level = 18f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.56675451993942261,
                            stardust_to_upgrade = 2200
                        },
                        new
                        {
                            pokemon_level = 18.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.57456914708018303,
                            stardust_to_upgrade = 2200
                        },
                        new
                        {
                            pokemon_level = 19f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.58227890729904175,
                            stardust_to_upgrade = 2500
                        },
                        new
                        {
                            pokemon_level = 19.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.5898879119195044,
                            stardust_to_upgrade = 2500
                        },
                        new
                        {
                            pokemon_level = 20f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.5974000096321106,
                            stardust_to_upgrade = 2500
                        },
                        new
                        {
                            pokemon_level = 20.5f,
                            candy_to_upgrade = 2,
                            cp_multiplier = 0.60482365638017654,
                            stardust_to_upgrade = 2500
                        },
                        new
                        {
                            pokemon_level = 21f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.61215728521347046,
                            stardust_to_upgrade = 3000
                        },
                        new
                        {
                            pokemon_level = 21.5f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.61940411105751991,
                            stardust_to_upgrade = 3000
                        },
                        new
                        {
                            pokemon_level = 22f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.62656712532043457,
                            stardust_to_upgrade = 3000
                        },
                        new
                        {
                            pokemon_level = 22.5f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.63364918157458305,
                            stardust_to_upgrade = 3000
                        },
                        new
                        {
                            pokemon_level = 23f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.64065295457839966,
                            stardust_to_upgrade = 3500
                        },
                        new
                        {
                            pokemon_level = 23.5f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.64758096635341644,
                            stardust_to_upgrade = 3500
                        },
                        new
                        {
                            pokemon_level = 24f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.654435634613037,
                            stardust_to_upgrade = 3500
                        },
                        new
                        {
                            pokemon_level = 24.5f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.6612192690372467,
                            stardust_to_upgrade = 3500
                        },
                        new
                        {
                            pokemon_level = 25f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.66793400049209595,
                            stardust_to_upgrade = 4000
                        },
                        new
                        {
                            pokemon_level = 25.5f,
                            candy_to_upgrade = 3,
                            cp_multiplier = 0.67458190023899078,
                            stardust_to_upgrade = 4000
                        },
                        new
                        {
                            pokemon_level = 26f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.68116492033004761,
                            stardust_to_upgrade = 4000
                        },
                        new
                        {
                            pokemon_level = 26.5f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.68768490850925446,
                            stardust_to_upgrade = 4000
                        },
                        new
                        {
                            pokemon_level = 27f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.69414365291595459,
                            stardust_to_upgrade = 4500
                        },
                        new
                        {
                            pokemon_level = 27.5f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.70054289698600769,
                            stardust_to_upgrade = 4500
                        },
                        new
                        {
                            pokemon_level = 28f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.70688420534133911,
                            stardust_to_upgrade = 4500
                        },
                        new
                        {
                            pokemon_level = 28.5f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.71316909790039062,
                            stardust_to_upgrade = 4500
                        },
                        new
                        {
                            pokemon_level = 29f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.719399094581604,
                            stardust_to_upgrade = 5000
                        },
                        new
                        {
                            pokemon_level = 29.5f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.72557561099529266,
                            stardust_to_upgrade = 5000
                        },
                        new
                        {
                            pokemon_level = 30f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.73170000314712524,
                            stardust_to_upgrade = 5000
                        },
                        new
                        {
                            pokemon_level = 30.5f,
                            candy_to_upgrade = 4,
                            cp_multiplier = 0.73474101722240448,
                            stardust_to_upgrade = 5000
                        },
                        new
                        {
                            pokemon_level = 31f,
                            candy_to_upgrade = 6,
                            cp_multiplier = 0.7377694845199585,
                            stardust_to_upgrade = 6000
                        },
                        new
                        {
                            pokemon_level = 31.5f,
                            candy_to_upgrade = 6,
                            cp_multiplier = 0.74078557640314102,
                            stardust_to_upgrade = 6000
                        },
                        new
                        {
                            pokemon_level = 32f,
                            candy_to_upgrade = 6,
                            cp_multiplier = 0.7437894344329834,
                            stardust_to_upgrade = 6000
                        },
                        new
                        {
                            pokemon_level = 32.5f,
                            candy_to_upgrade = 6,
                            cp_multiplier = 0.74678121507167816,
                            stardust_to_upgrade = 6000
                        },
                        new
                        {
                            pokemon_level = 33f,
                            candy_to_upgrade = 8,
                            cp_multiplier = 0.74976104497909546,
                            stardust_to_upgrade = 7000
                        },
                        new
                        {
                            pokemon_level = 33.5f,
                            candy_to_upgrade = 8,
                            cp_multiplier = 0.75272910296916962,
                            stardust_to_upgrade = 7000
                        },
                        new
                        {
                            pokemon_level = 34f,
                            candy_to_upgrade = 8,
                            cp_multiplier = 0.75568550825119019,
                            stardust_to_upgrade = 7000
                        },
                        new
                        {
                            pokemon_level = 34.5f,
                            candy_to_upgrade = 8,
                            cp_multiplier = 0.75863036513328552,
                            stardust_to_upgrade = 7000
                        },
                        new
                        {
                            pokemon_level = 35f,
                            candy_to_upgrade = 10,
                            cp_multiplier = 0.76156383752822876,
                            stardust_to_upgrade = 8000
                        },
                        new
                        {
                            pokemon_level = 35.5f,
                            candy_to_upgrade = 10,
                            cp_multiplier = 0.76448606699705124,
                            stardust_to_upgrade = 8000
                        },
                        new
                        {
                            pokemon_level = 36f,
                            candy_to_upgrade = 10,
                            cp_multiplier = 0.76739716529846191,
                            stardust_to_upgrade = 8000
                        },
                        new
                        {
                            pokemon_level = 36.5f,
                            candy_to_upgrade = 10,
                            cp_multiplier = 0.77029727399349213,
                            stardust_to_upgrade = 8000
                        },
                        new
                        {
                            pokemon_level = 37f,
                            candy_to_upgrade = 12,
                            cp_multiplier = 0.77318650484085083,
                            stardust_to_upgrade = 9000
                        },
                        new
                        {
                            pokemon_level = 37.5f,
                            candy_to_upgrade = 12,
                            cp_multiplier = 0.77606494724750519,
                            stardust_to_upgrade = 9000
                        },
                        new
                        {
                            pokemon_level = 38f,
                            candy_to_upgrade = 12,
                            cp_multiplier = 0.77893275022506714,
                            stardust_to_upgrade = 9000
                        },
                        new
                        {
                            pokemon_level = 38.5f,
                            candy_to_upgrade = 12,
                            cp_multiplier = 0.78179005999999995,
                            stardust_to_upgrade = 9000
                        },
                        new
                        {
                            pokemon_level = 39f,
                            candy_to_upgrade = 15,
                            cp_multiplier = 0.78463696999999999,
                            stardust_to_upgrade = 10000
                        },
                        new
                        {
                            pokemon_level = 39.5f,
                            candy_to_upgrade = 15,
                            cp_multiplier = 0.78747358000000001,
                            stardust_to_upgrade = 10000
                        });
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonOwned", b =>
                {
                    b.Property<int>("pokemon_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("pokemon_id"));

                    b.Property<int>("atack_iv")
                        .HasColumnType("integer");

                    b.Property<int>("defense_iv")
                        .HasColumnType("integer");

                    b.Property<float>("level")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<int>("pokemon")
                        .HasColumnType("integer");

                    b.Property<int>("stamina_iv")
                        .HasColumnType("integer");

                    b.HasKey("pokemon_id");

                    b.HasIndex("level");

                    b.HasIndex("owner");

                    b.HasIndex("pokemon");

                    b.ToTable("Pokemon_owned");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonRegister", b =>
                {
                    b.Property<int>("pokemon")
                        .HasColumnType("integer");

                    b.Property<string>("player")
                        .HasColumnType("character varying(20)");

                    b.Property<char>("gender")
                        .HasColumnType("character(1)");

                    b.Property<int>("capturedNumber")
                        .HasColumnType("integer");

                    b.Property<double>("height")
                        .HasColumnType("double precision");

                    b.Property<bool>("sawed")
                        .HasColumnType("boolean");

                    b.Property<double>("weight")
                        .HasColumnType("double precision");

                    b.HasKey("pokemon", "player", "gender");

                    b.HasIndex("player");

                    b.ToTable("Pokemon_register");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokeStop", b =>
                {
                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("location");

                    b.ToTable("PokeStop");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Present", b =>
                {
                    b.Property<int>("present_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("present_id"));

                    b.Property<DateTime>("get_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("opened")
                        .HasColumnType("boolean");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<string>("pokestop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("receptor")
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("send_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("present_id");

                    b.HasIndex("owner");

                    b.HasIndex("pokestop");

                    b.HasIndex("receptor");

                    b.ToTable("Present");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Raid", b =>
                {
                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<int>("boss")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("location");

                    b.HasIndex("boss");

                    b.ToTable("Raid");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.RaidParticipant", b =>
                {
                    b.Property<string>("gym")
                        .HasColumnType("text");

                    b.Property<string>("player")
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Raidlocation")
                        .HasColumnType("text");

                    b.HasKey("gym", "player");

                    b.HasIndex("Raidlocation");

                    b.HasIndex("player");

                    b.ToTable("Raid_participants");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Team", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.TypeTable", b =>
                {
                    b.Property<string>("element")
                        .HasColumnType("text");

                    b.Property<string>("affected_element")
                        .HasColumnType("text");

                    b.Property<double>("multiplier")
                        .HasColumnType("double precision");

                    b.HasKey("element", "affected_element");

                    b.HasIndex("affected_element");

                    b.ToTable("Type_table");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.User", b =>
                {
                    b.Property<string>("user_name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("caputred_pokemon")
                        .HasColumnType("integer");

                    b.Property<int>("experience")
                        .HasColumnType("integer");

                    b.Property<int>("inventory_capacity")
                        .HasColumnType("integer");

                    b.Property<short>("level")
                        .HasColumnType("smallint");

                    b.Property<int>("pokemon_slots")
                        .HasColumnType("integer");

                    b.Property<string>("team")
                        .HasColumnType("text");

                    b.Property<int>("won_battles")
                        .HasColumnType("integer");

                    b.HasKey("user_name");

                    b.HasIndex("level");

                    b.HasIndex("team");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.EggInventory", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Egg", "Egg")
                        .WithMany()
                        .HasForeignKey("egg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Player")
                        .WithMany("eggs")
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.EggPokemonPool", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Egg", "Egg")
                        .WithMany()
                        .HasForeignKey("egg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egg");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.EvolutionChain", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Pokemon", "PokemonBase")
                        .WithMany()
                        .HasForeignKey("pokemon_base")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Pokemon", "PokemonEvolved")
                        .WithMany()
                        .HasForeignKey("pokemon_evolved")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonBase");

                    b.Navigation("PokemonEvolved");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Friendship", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.User", "Friend")
                        .WithMany("friends")
                        .HasForeignKey("friend")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Player")
                        .WithMany()
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Gym", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.PokeStop", "PokeStop")
                        .WithMany()
                        .HasForeignKey("location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Team", "Team")
                        .WithMany("Gyms")
                        .HasForeignKey("team");

                    b.Navigation("PokeStop");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.GymDefense", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Gym", "Gym")
                        .WithMany("defensors")
                        .HasForeignKey("gym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.GymTrophy", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("gym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Player")
                        .WithMany("trophys")
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.LevelupObjectReward", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Level", "Level")
                        .WithMany("rewards")
                        .HasForeignKey("level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Object", "Object")
                        .WithMany("levels")
                        .HasForeignKey("object_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Movement", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Element", "Element")
                        .WithMany()
                        .HasForeignKey("element")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.ObjectInventory", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Object", "Object")
                        .WithMany()
                        .HasForeignKey("object_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Player")
                        .WithMany("inventory")
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PackageItems", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Object", "Object")
                        .WithMany()
                        .HasForeignKey("object_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.PackageOffer", "Package")
                        .WithMany("Items")
                        .HasForeignKey("package")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PackageOfferBought", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.PackageOffer", "Package")
                        .WithMany("buyers")
                        .HasForeignKey("package")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "User")
                        .WithMany("packagesOfferBought")
                        .HasForeignKey("user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Pokemon", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Egg", null)
                        .WithMany("PokemonPool")
                        .HasForeignKey("Eggkm_egg");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonExchange", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.User", "ExOwner")
                        .WithMany()
                        .HasForeignKey("ex_owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExOwner");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonOwned", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.PokemonLevel", "Level")
                        .WithMany("pokemons")
                        .HasForeignKey("level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Owner")
                        .WithMany("pokemons")
                        .HasForeignKey("owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Pokemon", "Pokemon")
                        .WithMany("Owners")
                        .HasForeignKey("pokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Owner");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonRegister", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.User", "Player")
                        .WithMany("pokedex")
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Present", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.User", "Owner")
                        .WithMany("presentsToSend")
                        .HasForeignKey("owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.PokeStop", "PokeStop")
                        .WithMany("presents")
                        .HasForeignKey("pokestop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Receptor")
                        .WithMany("recivedPresents")
                        .HasForeignKey("receptor");

                    b.Navigation("Owner");

                    b.Navigation("PokeStop");

                    b.Navigation("Receptor");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Raid", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("boss")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Gym", "Gym")
                        .WithMany("raids")
                        .HasForeignKey("location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.RaidParticipant", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Raid", null)
                        .WithMany("Participants")
                        .HasForeignKey("Raidlocation");

                    b.HasOne("PokemonGolotEF.Model.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("gym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.User", "Player")
                        .WithMany("raidsParticipated")
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.TypeTable", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Element", "Affected_element")
                        .WithMany()
                        .HasForeignKey("affected_element")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Element", "Element")
                        .WithMany()
                        .HasForeignKey("element")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affected_element");

                    b.Navigation("Element");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.User", b =>
                {
                    b.HasOne("PokemonGolotEF.Model.Level", "Level")
                        .WithMany("users")
                        .HasForeignKey("level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGolotEF.Model.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("team");

                    b.HasOne("PokemonGolotEF.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("user_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Egg", b =>
                {
                    b.Navigation("PokemonPool");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Gym", b =>
                {
                    b.Navigation("defensors");

                    b.Navigation("raids");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Level", b =>
                {
                    b.Navigation("rewards");

                    b.Navigation("users");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Object", b =>
                {
                    b.Navigation("levels");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PackageOffer", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("buyers");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Pokemon", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokemonLevel", b =>
                {
                    b.Navigation("pokemons");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.PokeStop", b =>
                {
                    b.Navigation("presents");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Raid", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.Team", b =>
                {
                    b.Navigation("Gyms");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("PokemonGolotEF.Model.User", b =>
                {
                    b.Navigation("eggs");

                    b.Navigation("friends");

                    b.Navigation("inventory");

                    b.Navigation("packagesOfferBought");

                    b.Navigation("pokedex");

                    b.Navigation("pokemons");

                    b.Navigation("presentsToSend");

                    b.Navigation("raidsParticipated");

                    b.Navigation("recivedPresents");

                    b.Navigation("trophys");
                });
#pragma warning restore 612, 618
        }
    }
}
